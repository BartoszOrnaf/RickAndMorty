{"version":3,"sources":["components/DeadOrAlive/assets/loading.png","components/DeadOrAlive/DeadOrAliveComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DeadOrAliveComponent","props","state","characterId","characterImg","loading","characterName","character","currentTry","score","scoreDisplay","scoreMessage","scoreStyle","nextOne","bind","toggleScoreDisplay","checkAnswer","this","getRandomCharacter","fetch","then","res","json","setState","Math","floor","random","info","count","getCharacter","method","image","name","catch","error","console","answer","status","params","className","src","alt","onClick","displayGame","id","displayScore","displayFinalScore","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.390e54d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.fab02513.png\";","import React from 'react';\r\nimport './DeadOrAlive.scss'\r\nimport loading from './assets/loading.png'\r\n\r\nclass DeadOrAliveComponent extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            characterId: 1,\r\n            characterImg: loading,\r\n            characterName: '',\r\n            character: '',\r\n            currentTry: 1,\r\n            score: 0,\r\n            scoreDisplay: false,\r\n            scoreMessage: '',\r\n            scoreStyle: 'font--small--red'\r\n        }\r\n\r\n        this.nextOne = this.nextOne.bind(this);\r\n        this.toggleScoreDisplay = this.toggleScoreDisplay.bind(this);\r\n        this.checkAnswer = this.checkAnswer.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getRandomCharacter()\r\n    }\r\n\r\n    getRandomCharacter() {\r\n        fetch(\r\n            \" https://rickandmortyapi.com/api/character/\"\r\n        ).then(res => res.json()).then(res => this.setState({\r\n            characterId: Math.floor(Math.random() * (res.info.count - 1)) + 1\r\n        }, this.getCharacter))\r\n    }\r\n\r\n    getCharacter() {\r\n\r\n        fetch(\r\n            `https://rickandmortyapi.com/api/character/${this.state.characterId}`,\r\n            { method: 'GET' }\r\n        )\r\n            .then(res => res.json())\r\n            .then(res => this.setState({\r\n                character: res,\r\n                characterImg: res.image,\r\n                characterName: res.name\r\n            }))\r\n            .catch(error => console.error('error:', error))\r\n    }\r\n\r\n    checkAnswer(answer) {\r\n        this.setState({\r\n            currentTry: this.state.currentTry + 1,\r\n        })\r\n\r\n        if (answer === this.state.character.status && answer === 'Alive') {\r\n            this.setState({\r\n                score: this.state.score + 1,\r\n                scoreMessage: `Yep! ${this.state.characterName} is alive! `,\r\n                scoreStyle: 'font--small--green'\r\n            })\r\n        } else if (answer === this.state.character.status && answer === 'Dead') {\r\n            this.setState({\r\n                score: this.state.score + 1,\r\n                scoreMessage: `That's right! ${this.state.characterName} is dead! `,\r\n                scoreStyle: 'font--small--green'\r\n            })\r\n        } else if (answer === this.state.character.status && answer === 'unknown') {\r\n            this.setState({\r\n                score: this.state.score + 1,\r\n                scoreMessage: `You guessed it! It is unknown!`,\r\n                scoreStyle: 'font--small--green'\r\n            })\r\n        } else {\r\n            this.setState({\r\n                scoreMessage: `Ups! ${this.state.characterName} status: ${this.state.character.status}`,\r\n                scoreStyle: 'font--small--red'\r\n            })\r\n        }\r\n    }\r\n\r\n    nextOne() {\r\n        this.setState({\r\n            characterImg: loading,\r\n            characterName: 'loading...'\r\n        }, () => {\r\n            this.getRandomCharacter();\r\n            this.toggleScoreDisplay();\r\n        })\r\n    }\r\n\r\n    toggleScoreDisplay() {\r\n        this.setState({\r\n            scoreDisplay: !this.state.scoreDisplay\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        \r\n        let displayGame = (params) => {\r\n\r\n            if (this.state.scoreDisplay === false && this.state.currentTry < 11) {\r\n                return (<div>\r\n                    <h1 className=\"font--small\">{this.state.currentTry} of 10</h1>\r\n                    <img src={this.state.characterImg} className=\"character__img\" alt=\"character\"></img>\r\n                    <h2 className=\"font--small\">{this.state.characterName}</h2>\r\n                    <h1 className=\"font--medium\">\r\n                        <button className=\"button--medium\" onClick={() => { this.checkAnswer(\"Dead\"); this.toggleScoreDisplay() }}>Dead</button>, <button className=\"button--medium\" onClick={() => { this.checkAnswer(\"Alive\"); this.toggleScoreDisplay() }}>alive</button> or <button className=\"button--medium\" onClick={() => { this.checkAnswer(\"unknown\"); this.toggleScoreDisplay() }}>unknown</button>?\r\n                    </h1>\r\n                </div>)\r\n            }\r\n\r\n        };\r\n\r\n        let displayScore = (params) => {\r\n\r\n            if (this.state.scoreDisplay && this.state.currentTry < 11) {\r\n                return (<div>\r\n                    <h1 id=\"answer\" className={this.state.scoreStyle} >{this.state.scoreMessage}</h1>\r\n                    <img src={this.state.characterImg}  className=\"character__img\" alt=\"character\"></img>\r\n                    <h2 className=\"font--small\">Your score is: {this.state.score}</h2>\r\n                    <button className=\"button--medium\" onClick={this.nextOne}>Next</button>\r\n                </div>)\r\n            }\r\n\r\n        };\r\n\r\n        let displayFinalScore = (params) => {\r\n            if (this.state.currentTry === 11) {\r\n                return (<div>\r\n                    <h1 id=\"answer\" className={this.state.scoreStyle} >{this.state.scoreMessage}</h1>\r\n                    <img src={this.state.characterImg} className=\"character__img\" alt=\"character\"></img>\r\n                    <h2 className=\"right\">Your final score is: {this.state.score} / 10</h2>\r\n                    <button className=\"button--medium\" onClick={() => {\r\n                        this.setState({\r\n                            currentTry: 1,\r\n                            scoreDisplay: false,\r\n                            characterImg: loading,\r\n                            characterName: 'loading...',\r\n                            score: 0\r\n                        }, this.getRandomCharacter())\r\n\r\n                    }}>Play again!</button>\r\n                </div>)\r\n            }\r\n\r\n        };\r\n\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    displayGame()\r\n                }\r\n                {\r\n                    displayScore()\r\n                }\r\n                {\r\n                    displayFinalScore()\r\n                }\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n};\r\n\r\nexport default DeadOrAliveComponent;","import React from 'react';\nimport './App.scss';\nimport DeadOrAliveComponent from './components/DeadOrAlive/DeadOrAliveComponent'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        \n    }\n}\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App__header\">\n          <h1 className=\"font--big\">KNOW YOUR RICK AND MORTY</h1>\n      </header>\n        < DeadOrAliveComponent id={'Rick'} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}