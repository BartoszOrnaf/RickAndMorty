{"version":3,"sources":["components/Character/DeadOrComponent.js","App.js","serviceWorker.js","index.js"],"names":["CharacterComponent","props","state","id","current","character","this","getCharacter","randomId","Math","floor","random","fetch","then","res","json","console","log","setState","catch","err","className","src","image","alt","name","React","Component","App","DeadOrComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6TA2CeA,G,kBArCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,GAAI,EACJC,QAAS,EACTC,UAAW,IALA,E,iFASfC,KAAKC,iB,qCAGO,IAAD,OACPC,EAAWC,KAAKC,MAAoB,IAAdD,KAAKE,UAC/BC,MAAM,6CAAD,OAA8CJ,IAAYK,MAC3D,SAAAC,GAAG,OAAIA,EAAIC,UACbF,MAAK,SAAAC,GACP,OADeE,QAAQC,IAAIH,GACpBA,KAAMD,MACT,SAAAC,GAAG,OAAI,EAAKI,SAAS,CAAEb,UAAWS,OACpCK,OAAM,SAAAC,GAAG,OAAIJ,QAAQC,IAAIG,Q,+BAK3B,OACI,6BACI,wBAAIC,UAAU,eAAef,KAAKJ,MAAME,QAAxC,SACA,yBAAKkB,IAAKhB,KAAKJ,MAAMG,UAAUkB,MAAOC,IAAI,cAC1C,wBAAIH,UAAU,cAAcf,KAAKJ,MAAMG,UAAUoB,MACjD,wBAAIJ,UAAU,eAAc,0BAAMA,UAAU,eAAhB,QAA5B,OAAyE,0BAAMA,UAAU,eAAhB,SAAzE,U,GAhCiBK,IAAMC,YCYxBC,MAXf,WACE,OACE,yBAAKP,UAAU,OACb,4BAAQA,UAAU,cAAlB,4BAGA,kBAAEQ,EAAF,CAAkB1B,GAAM,WCEV2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAyB,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.733a1823.chunk.js","sourcesContent":["import React from 'react';\r\nimport './DeadOr.scss'\r\n\r\nclass CharacterComponent extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: 1,\r\n            current: 1,\r\n            character: ''\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.getCharacter()\r\n    }\r\n\r\n    getCharacter() {\r\n        let randomId = Math.floor(Math.random()*300)\r\n        fetch(`https://rickandmortyapi.com/api/character/${randomId}`).then(\r\n            res => res.json()\r\n        ).then(res => {console.log(res)\r\n        return res}).then(\r\n            res => this.setState({ character: res })\r\n        ).catch(err => console.log(err))\r\n    }\r\n  \r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"font-medium\">{this.state.current} of 5</h1>\r\n                <img src={this.state.character.image} alt=\"character\"></img>\r\n                <h2 className=\"font-small\">{this.state.character.name}</h2>\r\n                <h1 className=\"font-medium\"><span className=\"dead-button\">Dead</span> or <span className=\"dead-button\">alive</span>?</h1>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n};\r\n\r\nexport default CharacterComponent;","import React from 'react';\nimport './App.scss';\nimport DeadOrComponent from './components/Character/DeadOrComponent'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        KNOW YOUR RICK AND MORTY\n      </header>\n      < DeadOrComponent id = {'Rick'} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}