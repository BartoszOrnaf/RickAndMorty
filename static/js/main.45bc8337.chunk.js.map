{"version":3,"sources":["components/DeadOrAlive/assets/loading.png","components/DeadOrAlive/DisplayScore.js","components/DeadOrAlive/DisplayFinalScore.js","components/DeadOrAlive/DisplayGame.js","components/DeadOrAlive/DeadOrAlive.js","components/WhoIsWho/Board.js","components/WhoIsWho/Card.js","components/WhoIsWho/DisplayGame.js","components/WhoIsWho/DisplayScore.js","components/WhoIsWho/DisplayFinalScore.js","components/WhoIsWho/WhoIsWho.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DisplayScore","props","className","scoreStyle","scoreMessage","src","characterImg","alt","score","onClick","nextOne","DisplayFinalScore","playAgain","DisplayGame","currentTry","characterName","checkAnswer","DeadOrAlive","state","characterId","loading","character","scoreDisplay","bind","toggleScoreDisplay","this","getRandomCharacter","fetch","then","res","json","setState","Math","floor","random","info","count","getCharacter","method","image","name","catch","error","console","answer","status","React","Component","Board","id","onDrop","e","preventDefault","card_id","dataTransfer","getData","card","document","getElementById","all","getElementsByClassName","i","length","style","backgroundImage","target","appendChild","slice","onDragOver","children","Card","draggable","onDragStart","setData","stopPropagation","charactersArr","map","key","searchedCharacterName","searchedCharacterImg","WhoIsWho","randomIds","searchedCharacter","getCharacterCount","getRandomIds","addCharacter","getSearchedCharacter","callback","characterCount","currentId","indexOf","push","randomIndex","searchedId","forEach","element","toString","setTimeout","App","to","path","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.45bc8337.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.fab02513.png\";","import React from 'react';\r\nimport './deadOrAlive.scss';\r\n\r\nfunction DisplayScore(props) {\r\n\r\n    return (\r\n        <div>\r\n            <h1 className={props.scoreStyle} >{props.scoreMessage}</h1>\r\n            <img src={props.characterImg} className=\"character__img\" alt=\"character\"></img>\r\n            <h2 className=\"font--small\">Your score is: {props.score}</h2>\r\n            <button className=\"button--medium\" onClick={props.nextOne}>Next</button>\r\n        </div>\r\n    )\r\n    \r\n};\r\n\r\nexport default DisplayScore;","import React from 'react';\r\nimport './deadOrAlive.scss';\r\n\r\nfunction DisplayFinalScore(props) {\r\n\r\n    return (<div>\r\n        <h1 className={props.scoreStyle} >{props.scoreMessage}</h1>\r\n        <img src={props.characterImg} className=\"character__img\" alt=\"character\"></img>\r\n        <h2 className=\"font--small--green\">Your final score is: {props.score} / 10</h2>\r\n        <button className=\"button--medium\" onClick={props.playAgain}>Play again!</button>\r\n    </div>)\r\n\r\n};\r\n\r\nexport default DisplayFinalScore;","import React from 'react';\r\nimport './deadOrAlive.scss';\r\n\r\nfunction DisplayGame(props) {\r\n\r\n    return (<div>\r\n        <h1 className=\"font--small\">{props.currentTry} of 10</h1>\r\n        <img src={props.characterImg} className=\"character__img\" alt=\"character\"/>\r\n        <h2 className=\"font--small\">{props.characterName}</h2>\r\n        <h1 className=\"font--medium\">\r\n            <button className=\"button--medium\"\r\n                onClick={() => {\r\n                    props.checkAnswer(\"Dead\");\r\n                }}> Dead </button>, <button className=\"button--medium\"\r\n                    onClick={() => {\r\n                        props.checkAnswer(\"Alive\");\r\n                    }}> alive </button> or <button className=\"button--medium\"\r\n                        onClick={() => {\r\n                            props.checkAnswer(\"unknown\");\r\n                        }}> unknown</button>?\r\n        </h1>\r\n    </div>)\r\n\r\n};\r\n\r\nexport default DisplayGame;","import React from 'react';\r\nimport './deadOrAlive.scss'\r\nimport loading from './assets/loading.png'\r\nimport DisplayScore from './DisplayScore'\r\nimport DisplayFinalScore from './DisplayFinalScore'\r\nimport DisplayGame from './DisplayGame'\r\n\r\n\r\nclass DeadOrAlive extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            characterId: 1,\r\n            characterImg: loading,\r\n            characterName: '',\r\n            character: '',\r\n            currentTry: 1,\r\n            score: 0,\r\n            scoreDisplay: false,\r\n            scoreMessage: '',\r\n            scoreStyle: 'font--small--red'\r\n        }\r\n\r\n        this.nextOne = this.nextOne.bind(this);\r\n        this.toggleScoreDisplay = this.toggleScoreDisplay.bind(this);\r\n        this.checkAnswer = this.checkAnswer.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getRandomCharacter()\r\n    }\r\n\r\n    getRandomCharacter() {\r\n        fetch(\r\n            \" https://rickandmortyapi.com/api/character/\"\r\n        ).then(res => res.json()).then(res => this.setState({\r\n            characterId: Math.floor(Math.random() * (res.info.count - 1)) + 1\r\n        }, this.getCharacter))\r\n    }\r\n\r\n    getCharacter() {\r\n\r\n        fetch(\r\n            `https://rickandmortyapi.com/api/character/${this.state.characterId}`,\r\n            { method: 'GET' }\r\n        )\r\n            .then(res => res.json())\r\n            .then(res => this.setState({\r\n                character: res,\r\n                characterImg: res.image,\r\n                characterName: res.name\r\n            }))\r\n            .catch(error => console.error('error:', error))\r\n    }\r\n\r\n    checkAnswer(answer) {\r\n\r\n        this.setState({\r\n            currentTry: this.state.currentTry + 1,\r\n        })\r\n\r\n        if (answer === this.state.character.status && answer === 'Alive') {\r\n            this.setState({\r\n                score: this.state.score + 1,\r\n                scoreMessage: `Yep! ${this.state.characterName} is alive! `,\r\n                scoreStyle: 'font--small--green'\r\n            })\r\n        } else if (answer === this.state.character.status && answer === 'Dead') {\r\n            this.setState({\r\n                score: this.state.score + 1,\r\n                scoreMessage: `That's right! ${this.state.characterName} is dead! `,\r\n                scoreStyle: 'font--small--green'\r\n            })\r\n        } else if (answer === this.state.character.status && answer === 'unknown') {\r\n            this.setState({\r\n                score: this.state.score + 1,\r\n                scoreMessage: `You guessed it! It is unknown!`,\r\n                scoreStyle: 'font--small--green'\r\n            })\r\n        } else {\r\n            this.setState({\r\n                scoreMessage: `Ups! ${this.state.characterName} status: ${this.state.character.status}`,\r\n                scoreStyle: 'font--small--red'\r\n            })\r\n        }\r\n        this.toggleScoreDisplay();\r\n    }\r\n\r\n    nextOne() {\r\n        this.setState({\r\n            characterImg: loading,\r\n            characterName: 'loading...'\r\n        }, () => {\r\n            this.getRandomCharacter();\r\n            this.toggleScoreDisplay();\r\n        })\r\n    }\r\n\r\n    toggleScoreDisplay() {\r\n        this.setState({\r\n            scoreDisplay: !this.state.scoreDisplay\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n\r\n                {\r\n                    (this.state.scoreDisplay === false && this.state.currentTry < 11) ? (\r\n                        <DisplayGame\r\n                            currentTry={this.state.currentTry}\r\n                            characterImg={this.state.characterImg}\r\n                            characterName={this.state.characterName}\r\n                            checkAnswer={this.checkAnswer}\r\n                        />\r\n                    ) : false\r\n                }\r\n\r\n                {\r\n                    (this.state.scoreDisplay && this.state.currentTry < 11) ? (\r\n                        <DisplayScore\r\n                            scoreStyle={this.state.scoreStyle}\r\n                            scoreMessage={this.state.scoreMessage}\r\n                            characterImg={this.state.characterImg}\r\n                            score={this.state.score}\r\n                            nextOne={this.nextOne}\r\n                        />\r\n                    ) : false\r\n                }\r\n\r\n                {\r\n                    (this.state.currentTry === 11) ? (\r\n                        <DisplayFinalScore\r\n                            scoreStyle={this.state.scoreStyle}\r\n                            scoreMessage={this.state.scoreMessage}\r\n                            characterImg={this.state.characterImg}\r\n                            score={this.state.score}\r\n                            playAgain={() => {\r\n                                this.setState({\r\n                                    currentTry: 1,\r\n                                    scoreDisplay: false,\r\n                                    characterImg: loading,\r\n                                    characterName: 'loading...',\r\n                                    score: 0\r\n                                }, this.getRandomCharacter())\r\n                            }}\r\n                        />\r\n                    ) : false\r\n                }\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n};\r\n\r\nexport default DeadOrAlive;","import React from 'react';\r\nimport './whoIsWho.scss'\r\n\r\nfunction Board(props) {\r\n\r\n    const drop = e => {\r\n        e.preventDefault();\r\n        const card_id = e.dataTransfer.getData('card_id');\r\n        const card = document.getElementById(card_id);\r\n\r\n        let all = document.getElementsByClassName('board');\r\n        for (let i = 0; i < all.length; i++) {\r\n            all[i].style.backgroundImage = 'none';\r\n        }\r\n\r\n        if (e.target.id === \"board-compare\") {\r\n            e.target.appendChild(card);\r\n        }\r\n\r\n        props.checkAnswer(card_id.slice(5))\r\n    }\r\n\r\n    const dragOver = e => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <div\r\n            id={props.id}\r\n            className={props.className}\r\n            onDrop={drop}\r\n            onDragOver={dragOver}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default Board;","import React from 'react';\r\nimport './whoIsWho.scss';\r\n\r\nfunction Card(props) {\r\n\r\n    const dragStart = e => {\r\n        const target = e.target;\r\n        e.dataTransfer.setData('card_id', target.id);\r\n    }\r\n\r\n    const dragOver = e => {\r\n        e.stopPropagation()\r\n    }\r\n\r\n    return (\r\n        <div\r\n            id={props.id}\r\n            className={props.className}\r\n            draggable={props.draggable}\r\n            onDragStart={dragStart}\r\n            onDragOver={dragOver}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport './whoIsWho.scss';\r\nimport Board from './Board';\r\nimport Card from './Card';\r\n\r\nfunction DisplayGame(props) {\r\n        return (\r\n            <div>\r\n                <h1 className=\"font--small\">{props.currentTry} of 10</h1>\r\n                <div className=\"character-grid\">\r\n                    {\r\n                        props.charactersArr.map((character) =>\r\n                            <Board\r\n                                id={`board-${character.characterId}`}\r\n                                key={character.characterId}\r\n                                className=\"board\">\r\n                                <Card\r\n                                    className=\"card\"\r\n                                    draggable=\"true\">\r\n                                    <img\r\n                                        id={`card-${character.characterId}`}\r\n                                        src={character.characterImg}\r\n                                        className=\"character__img--small\"\r\n                                        alt=\"character\"\r\n                                    />\r\n                                </Card>\r\n                            </Board>)\r\n                    }\r\n                    <Board\r\n                        id=\"board-compare\"\r\n                        className=\"board__compare\"\r\n                        checkAnswer={props.checkAnswer}\r\n                        >\r\n                        <Card\r\n                            id=\"card-compare\"\r\n                            draggable=\"false\">\r\n                        </Card>\r\n                    </Board>\r\n                </div>\r\n\r\n                <div className=\"font--small answer\">\r\n                    <p>Drag {props.searchedCharacterName} into the empty slot</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\nexport default DisplayGame;","import React from 'react';\r\nimport './whoIsWho.scss';\r\n\r\nfunction DisplayScore(props) {\r\n\r\n    return (\r\n        <div>\r\n            <h1 className={props.scoreStyle} >{props.scoreMessage}</h1>\r\n            <img src={props.searchedCharacterImg} className=\"character__img\" alt=\"character\"></img>\r\n            <h2 className=\"font--small\">Your score is: {props.score}</h2>\r\n            <button className=\"button--medium\" onClick={props.nextOne}>Next</button>\r\n        </div>\r\n    )\r\n    \r\n};\r\n\r\nexport default DisplayScore;","import React from 'react';\r\nimport './whoIsWho.scss';\r\n\r\nfunction DisplayFinalScore(props) {\r\n\r\n    return (<div>\r\n        <h1 className={props.scoreStyle} >{props.scoreMessage}</h1>\r\n        <img src={props.searchedCharacterImg} className=\"character__img\" alt=\"character\"></img>\r\n        <h2 className=\"font--small--green\">Your final score is: {props.score} / 10</h2>\r\n        <button className=\"button--medium\" onClick={props.playAgain}>Play again!</button>\r\n    </div>)\r\n\r\n};\r\n\r\nexport default DisplayFinalScore;","import React from 'react';\r\nimport './whoIsWho.scss';\r\nimport DisplayGame from './DisplayGame'\r\nimport DisplayScore from './DisplayScore'\r\nimport DisplayFinalScore from './DisplayFinalScore'\r\nclass WhoIsWho extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            randomIds: [],\r\n            charactersArr: [],\r\n            searchedCharacter: {},\r\n            currentTry: 1,\r\n            score: 0,\r\n            scoreMessage: '',\r\n            scoreDisplay: false,\r\n            scoreStyle: 'font--small--red'\r\n        }\r\n        this.checkAnswer = this.checkAnswer.bind(this);\r\n        this.nextOne = this.nextOne.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getCharacterCount(() => {\r\n            this.getRandomIds(() => {\r\n                this.addCharacter();\r\n                this.getSearchedCharacter();\r\n            })\r\n        })\r\n    }\r\n\r\n    getCharacterCount(callback) {\r\n        fetch(\r\n            `https://rickandmortyapi.com/api/character`\r\n        )\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                this.setState({\r\n                    characterCount: res.info.count\r\n                }, callback)\r\n            })\r\n            .catch(error => console.error('error:', error))\r\n    }\r\n\r\n    getRandomIds(callback) {\r\n        const randomIds = [];\r\n        while (randomIds.length < 8) {\r\n            let currentId = Math.floor(Math.random() * (this.state.characterCount - 1)) + 1\r\n            if (randomIds.indexOf(currentId) === -1) {\r\n                randomIds.push(currentId)\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            randomIds: randomIds\r\n        }, callback)\r\n    }\r\n\r\n    getSearchedCharacter(callback) {\r\n        let randomIndex = Math.floor(Math.random() * 7)\r\n        let searchedId = this.state.randomIds[randomIndex]\r\n\r\n        fetch(\r\n            `https://rickandmortyapi.com/api/character/${searchedId}`,\r\n            { method: 'GET' }\r\n        )\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                this.setState({\r\n                    searchedCharacter: res,\r\n                    searchedCharacterImg: res.image\r\n                }, callback)\r\n            })\r\n            .catch(error => console.error('error:', error))\r\n    }\r\n\r\n    addCharacter() {\r\n        this.state.randomIds.forEach(element => {\r\n            fetch(\r\n                `https://rickandmortyapi.com/api/character/${element}`,\r\n                { method: 'GET' }\r\n            )\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    this.setState({\r\n                        charactersArr: [...this.state.charactersArr, {\r\n                            characterId: res.id,\r\n                            characterImg: res.image,\r\n                            characterName: res.name\r\n                        }]\r\n                    })\r\n                })\r\n                .catch(error => console.error('error:', error))\r\n        });\r\n    }\r\n\r\n    checkAnswer(answer) {\r\n\r\n        if (answer === this.state.searchedCharacter.id.toString()) {\r\n            this.setState({\r\n                currentTry: this.state.currentTry + 1,\r\n                score: this.state.score + 1,\r\n                scoreMessage: `You guessed it! This is ${this.state.searchedCharacter.name}:`,\r\n                scoreStyle: 'font--small--green'\r\n            }, () => { setTimeout(() => this.toggleScoreDisplay(), 300) })\r\n        } else {\r\n            this.setState({\r\n                currentTry: this.state.currentTry + 1,\r\n                scoreMessage: `Ups! You got it wrong! This is ${this.state.searchedCharacter.name}:`,\r\n                scoreStyle: 'font--small--red'\r\n            }, () => { setTimeout(() => this.toggleScoreDisplay(), 300) })\r\n        }\r\n    }\r\n\r\n    nextOne() {\r\n        this.setState({\r\n            charactersArr: [],\r\n        }, () => {\r\n            this.getRandomIds(() => {\r\n                this.getSearchedCharacter(\r\n                    () => { this.toggleScoreDisplay() }\r\n                );\r\n                this.addCharacter();\r\n            })\r\n        })\r\n    }\r\n\r\n    toggleScoreDisplay() {\r\n        this.setState({\r\n            scoreDisplay: !this.state.scoreDisplay\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (<div>\r\n            {\r\n                (this.state.scoreDisplay === false && this.state.currentTry < 11) ? (\r\n                    <DisplayGame\r\n                        currentTry={this.state.currentTry}\r\n                        charactersArr={this.state.charactersArr}\r\n                        checkAnswer={this.checkAnswer}\r\n                        searchedCharacterName={this.state.searchedCharacter.name}\r\n                    />\r\n                ) : false\r\n            }\r\n\r\n            {\r\n                (this.state.scoreDisplay && this.state.currentTry < 11) ? (\r\n                    <DisplayScore\r\n                        scoreStyle={this.state.scoreStyle}\r\n                        scoreMessage={this.state.scoreMessage}\r\n                        searchedCharacterImg={this.state.searchedCharacter.image}\r\n                        score={this.state.score}\r\n                        nextOne={this.nextOne}\r\n                    />\r\n                ) : false\r\n            }\r\n\r\n            {\r\n                (this.state.currentTry === 11) ? (\r\n                    <DisplayFinalScore\r\n                        scoreStyle={this.state.scoreStyle}\r\n                        scoreMessage={this.state.scoreMessage}\r\n                        searchedCharacterImg={this.state.searchedCharacter.image}\r\n                        score={this.state.score}\r\n                        playAgain={() => {\r\n                            this.setState({\r\n                                currentTry: 1,\r\n                                scoreDisplay: false,\r\n                                score: 0\r\n                            },   this.setState({\r\n                                charactersArr: [],\r\n                            }, () => {\r\n                                this.getRandomIds(() => {\r\n                                    this.getSearchedCharacter();\r\n                                    this.addCharacter();\r\n                                })\r\n                            }))\r\n                        }}\r\n                    />\r\n                ) : false\r\n            }\r\n        </div>)\r\n    }\r\n};\r\n\r\nexport default WhoIsWho;","import React from 'react';\r\nimport './App.scss';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport DeadOrAlive from './components/DeadOrAlive/DeadOrAlive'\r\nimport WhoIsWho from './components/WhoIsWho/WhoIsWho'\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n    return (<Router>\r\n      <div className=\"App\">\r\n        \r\n        <header className=\"App__header\">\r\n          <h1 className=\"font--big\">KNOW YOUR RICK AND MORTY</h1>\r\n          <nav>\r\n            {/* <Link to=\"/\">Home</Link> */}\r\n            <span><Link to=\"/deadoralive\">Dead or alive </Link></span>\r\n            <span><Link to=\"/whoiswho\"> Who is who</Link></span>\r\n          </nav>\r\n        </header>\r\n\r\n        <div className=\"container__games\">\r\n        <Switch>\r\n          <Route path=\"/deadoralive\">\r\n            <DeadOrAlive />\r\n          </Route>\r\n          <Route path=\"/whoiswho\">\r\n            <WhoIsWho />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <DeadOrAlive />\r\n          </Route>\r\n        </Switch>\r\n        </div>\r\n\r\n      </div>\r\n    </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}